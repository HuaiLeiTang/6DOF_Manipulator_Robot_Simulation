%% Preparing MATLAB to start working

clc
clear all
close all
format compact

%% Reading STL file

aux = 1e2;
base = stlread('base.stl'); base.facecolor = [1 0 0]; base.edgecolor = 'none'; base.vertices = base.vertices / aux;
link1 = stlread('link1.stl'); link1.facecolor = [1 1 0]; link1.edgecolor = 'none'; link1.vertices = link1.vertices / aux;
link2 = stlread('link2.stl'); link2.facecolor = [1 0 1]; link2.edgecolor = 'none'; link2.vertices = link2.vertices / aux;
link3 = stlread('link3.stl'); link3.facecolor = [0 1 0]; link3.edgecolor = 'none'; link3.vertices = link3.vertices / aux;
link4 = stlread('link4.stl'); link4.facecolor = [0 1 1]; link4.edgecolor = 'none'; link4.vertices = link4.vertices / aux;
link5 = stlread('link5.stl'); link5.facecolor = [0 0 1]; link5.edgecolor = 'none'; link5.vertices = link5.vertices / aux;
end_effector = stlread('end_effector.stl'); end_effector.facecolor = [.5 .5 .5]; end_effector.edgecolor = 'none'; end_effector.vertices = end_effector.vertices / aux;

%% Declaring links fixed link lengths of the manipulator (from SolidWorks design)

global l1 l2 d2 l3 d3 l4 l5 l6;

l1 = 1800 / aux;
l2 = sqrt(500 ^ 2 + 3000 ^ 2) / aux;
d2 = 125 / aux;
l3 = 500 / aux;
d3 = 125 / aux;
l4 = 2500 / aux;
l5 = 100 / aux;
l6 = 300 / aux;

%% Moving parts to theirs origin and orientation

% Moving base to align with frame 0
T = [1    0    0   -625 / aux
    0    1    0   -625 / aux
    0    0    1    0
    0    0    0    1];
base_new = transformation(base, T);


% Moving link1 to align with frame 0
T = [1    0    0   -750 / aux
    0    1    0   -750 / aux
    0    0    1   -1250 / aux
    0    0    0    1];
link1_new = transformation(link1, T);

T = [0    1    0    0
    0    0    1    0
    1    0    0    0
    0    0    0    1];
link1_new = transformation(link1_new, T);

% Moving link2 to align with frame 0
T = [1    0    0   -375 / aux
    0    1    0   -1000 / aux
    0    0    1   -3500 / aux
    0    0    0    1];
link2_new = transformation(link2, T);

T = [0    0    1    0
    0    1    0    0
    -1    0    0    0
    0    0    0    1];
link2_new = transformation(link2_new, T);

theta = -atan(500 / 3000);
T = [cos(theta)   -sin(theta)    0     0
    sin(theta)    cos(theta)    0     0
    0              0         1     0
    0              0         0     1];
link2_new = transformation(link2_new, T);

% Moving link3 to align with frame 0
T = [1   0    0   -250 / aux
    0   1    0   -750 / aux
    0   0    1   -125 / aux
    0   0    0    1];
link3_new = transformation(link3, T);

T = [0    1    0    0
    0    0    1    0
    1    0    0    0
    0    0    0    1];
link3_new = transformation(link3_new, T);

% Moving link4 to align with frame 0
T = [1    0    0   -125 / aux
    0    1    0   -2000 / aux
    0    0    1   -125 / aux
    0    0    0    1];
link4_new = transformation(link4, T);

% Moving link5 to align with frame 0
T = [1    0    0   -125 / aux
    0    1    0   -75 / aux
    0    0    1   -75 / aux
    0    0    0    1];
link5_new = transformation(link5, T);

T = [0   -1    0    0
    1    0    0    0
    0    0    1    0
    0    0    0    1];
link5_new = transformation(link5_new, T);

% Moving end_effector to align with frame 0
T = [1   0    0   -150 * cosd(30) / aux
    0   1    0       -100 / aux
    0   0    1       -300 / aux
    0   0    0         1];
end_effector_new = transformation(end_effector, T);

%% Ploting each part at the origin:

% figure, axis equal, view(3), xlabel('x'), ylabel('y'), zlabel('z'), grid on, hold on;
% patch(base_new);
% patch(link1_new);
% patch(link2_new);
% patch(link3_new);
% patch(link4_new);
% patch(link5_new);
% patch(end_effector_new);

%%   D&H Table:

%   i       a_i         alpha_i         d_i        theta_i       Ti_i-1
%   1        0           90            l1         theta_1* `    T1_0
%   2        l2            0            d2         theta_2*      T2_1
%   3        l3          -90             0         theta_3*      T3_2
%   4        0            90          d3 + l4      theta_4*      T4_3
%   5        0           -90             0         theta_5*      T5_4
%   6        0            0           l5 + l6      theta_6*      T6_5

theta = 0;

a_1 = 0;
alpha_1 = 90;
d_1 = l1;
theta_1 = theta; % variable
T1_0 = getTi_i_1(a_1, alpha_1, d_1, theta_1);
link1_cur = transformation(link1_new, T1_0);

a_2 = l2;
alpha_2 = 0;
d_2 = d2;
theta_2 = theta; % variable
T2_1 = getTi_i_1(a_2, alpha_2, d_2, theta_2);
T2_0 = T1_0 * T2_1;
link2_cur = transformation(link2_new, T2_0);

a_3 = l3;
alpha_3 = -90;
d_3 = 0;
theta_3 = theta; % variable
T3_2 = getTi_i_1(a_3, alpha_3, d_3, theta_3);
T3_0 = T2_0 * T3_2;
link3_cur = transformation(link3_new, T3_0);

a_4 = 0;
alpha_4 = 90;
d_4 = d3 + l4;
theta_4 = theta; % variable
T4_3 = getTi_i_1(a_4, alpha_4, d_4, theta_4);
T4_0 = T3_0 * T4_3;
link4_cur = transformation(link4_new, T4_0);

a_5 = 0;
alpha_5 = -90;
d_5 = 0;
theta_5 = theta; % variable
T5_4 = getTi_i_1(a_5, alpha_5, d_5, theta_5);
T5_0 = T4_0 * T5_4;
link5_cur = transformation(link5_new, T5_0);

a_6 = 0;
alpha_6 = 0;
d_6 = l5 + l6;
theta_6 = theta; % variable
T6_5 = getTi_i_1(a_6, alpha_6, d_6, theta_6);
T6_0 = T5_0 * T6_5;
end_effector_cur = transformation(end_effector_new, T6_0);

%% Ploting each part at the origin:

% figure, axis equal, view(3), xlabel('x'), ylabel('y'), zlabel('z'), grid on, hold on;
% patch(base_new);
% patch(link1_cur);
% patch(link2_cur);
% patch(link3_cur);
% patch(link4_cur);
% patch(link5_cur);
% patch(end_effector_cur);

global theta_2_priori theta_3_priori theta_4_priori theta_5_priori;
theta_2_priori = theta * pi / 180;
theta_3_priori = theta * pi / 180;
theta_4_priori = theta * pi / 180;
theta_5_priori = theta * pi / 180;

m = 50; % number of circumferences
n = 32; % maximum number of points in a circumference

xc = 2500 / aux;
yc = 2500 / aux;
zc = 4000 / aux;
rho = 500 / aux;

i = 1;
phi = 0;
for j = 1 : n / 2
    for theta = linspace(0, 2 * pi, 2 * j - 1)
        T(:, :, i) = [sin(phi) * cos(theta)     cos(phi) * cos(theta)       -sin(theta)     xc + rho * sin(phi) * cos(theta)
            sin(phi) * sin(theta)               cos(phi) * sin(theta)       cos(theta)      yc + rho * sin(phi) * sin(theta)
            cos(phi)                            -sin(phi)                   0               zc + rho * cos(phi)
            0                                   0                           0               1];
        T(:, :, i) = T(:, :, i) * [0 0 -1 0; 0 1 0 0; 1 0 0 0; 0 0 0 1];
        i = i + 1;
    end;
    phi = phi +  pi / m;
end;
for j = 1 : m - n
    for theta = linspace(0, 2 * pi, n)
        T(:, :, i) = [sin(phi) * cos(theta)     cos(phi) * cos(theta)       -sin(theta)     xc + rho * sin(phi) * cos(theta)
            sin(phi) * sin(theta)               cos(phi) * sin(theta)       cos(theta)      yc + rho * sin(phi) * sin(theta)
            cos(phi)                            -sin(phi)                   0               zc + rho * cos(phi)
            0                                   0                           0               1];
        T(:, :, i) = T(:, :, i) * [0 0 -1 0; 0 1 0 0; 1 0 0 0; 0 0 0 1];
        i = i + 1;
    end;
    phi = phi +  pi / m;
end;
for j = n / 2 : -1 : 1
    for theta = linspace(0, 2 * pi, 2 * j - 1)
        T(:, :, i) = [sin(phi) * cos(theta)     cos(phi) * cos(theta)       -sin(theta)     xc + rho * sin(phi) * cos(theta)
            sin(phi) * sin(theta)               cos(phi) * sin(theta)       cos(theta)      yc + rho * sin(phi) * sin(theta)
            cos(phi)                            -sin(phi)                   0               zc + rho * cos(phi)
            0                                   0                           0               1];
        T(:, :, i) = T(:, :, i) * [0 0 -1 0; 0 1 0 0; 1 0 0 0; 0 0 0 1];
        i = i + 1;
    end;
    phi = phi +  pi / m;
end;

tam = size(T, 3);

for i = 1 : tam
    % Inverse Kinematics
    [theta_1 theta_2 theta_3 theta_4 theta_5 theta_6] = inverseKinematics(T(:, :, i));

    % Forward Kinematics
    T1_0 =  getTi_i_1(a_1, alpha_1, d_1, theta_1);
    link1_cur = transformation(link1_new, T1_0);

    T2_1 = getTi_i_1(a_2, alpha_2, d_2, theta_2);
    T2_0 = T1_0 * T2_1;
    link2_cur = transformation(link2_new, T2_0);

    T3_2 = getTi_i_1(a_3, alpha_3, d_3, theta_3);
    T3_0 = T2_0 * T3_2;
    link3_cur = transformation(link3_new, T3_0);

    T4_3 = getTi_i_1(a_4, alpha_4, d_4, theta_4);
    T4_0 = T3_0 * T4_3;
    link4_cur = transformation(link4_new, T4_0);

    T5_4 = getTi_i_1(a_5, alpha_5, d_5, theta_5);
    T5_0 = T4_0 * T5_4;
    link5_cur = transformation(link5_new, T5_0);

    T6_5 = getTi_i_1(a_6, alpha_6, d_6, theta_6);
    T6_0 = T5_0 * T6_5;
    end_effector_cur = transformation(end_effector_new, T6_0);

    % Animate
    cla, hold on;
    patch(base_new);
    patch(link1_cur);
    patch(link2_cur);
    patch(link3_cur);
    patch(link4_cur);
    patch(link5_cur);
    patch(end_effector_cur);
    P1(i, 1) = T(1, 4, i);
    P1(i, 2) = T(2, 4, i);
    P1(i, 3) = T(3, 4, i);
    plot3(P1(:, 1),P1(:, 2),P1(:, 3), 'b');
    P2(i, 1) = T6_0(1, 4);
    P2(i, 2) = T6_0(2, 4);
    P2(i, 3) = T6_0(3, 4);
    plot3(P2(:, 1),P2(:, 2),P2(:, 3), 'r');
    hold off, axis equal;
    max = l1 + l2 + l3 + l4 + l5 + l6;
    min = -max;
    axis([min max min max 0 max]);
    view(3), xlabel('x'), ylabel('y'), zlabel('z'), grid on;
    pause(.001);
end;

y = 30;
T = Phrase_Path(5, -30, 25, y);
tam = size(T, 3);

for i = 1 : tam
    % Inverse Kinematics
    [theta_1 theta_2 theta_3 theta_4 theta_5 theta_6] = inverseKinematics(T(:, :, i));

    % Forward Kinematics
    T1_0 =  getTi_i_1(a_1, alpha_1, d_1, theta_1);
    link1_cur = transformation(link1_new, T1_0);

    T2_1 = getTi_i_1(a_2, alpha_2, d_2, theta_2);
    T2_0 = T1_0 * T2_1;
    link2_cur = transformation(link2_new, T2_0);

    T3_2 = getTi_i_1(a_3, alpha_3, d_3, theta_3);
    T3_0 = T2_0 * T3_2;
    link3_cur = transformation(link3_new, T3_0);

    T4_3 = getTi_i_1(a_4, alpha_4, d_4, theta_4);
    T4_0 = T3_0 * T4_3;
    link4_cur = transformation(link4_new, T4_0);

    T5_4 = getTi_i_1(a_5, alpha_5, d_5, theta_5);
    T5_0 = T4_0 * T5_4;
    link5_cur = transformation(link5_new, T5_0);

    T6_5 = getTi_i_1(a_6, alpha_6, d_6, theta_6);
    T6_0 = T5_0 * T6_5;
    end_effector_cur = transformation(end_effector_new, T6_0);

    % Animate
    cla, hold on;
    patch(base_new);
    patch(link1_cur);
    patch(link2_cur);
    patch(link3_cur);
    patch(link4_cur);
    patch(link5_cur);
    patch(end_effector_cur);
    if T(2, 4, i) == y
        P3(i, 1) = T(1, 4, i);
        P3(i, 2) = T(2, 4, i);
        P3(i, 3) = T(3, 4, i);
        plot3(P3(:, 1),P3(:, 2),P3(:, 3), '.b');
        P4(i, 1) = T6_0(1, 4);
        P4(i, 2) = T6_0(2, 4);
        P4(i, 3) = T6_0(3, 4);
        plot3(P4(:, 1),P4(:, 2),P4(:, 3), '*r');
    end;
    hold off, axis equal;
    max = l1 + l2 + l3 + l4 + l5 + l6;
    min = -max;
    axis([min max min max 0 max]);
    view(3), xlabel('x'), ylabel('y'), zlabel('z'), grid on;
    pause(.001);
end;

PATH = zeros(tam, 3);
x_center = 4;
z_center = 27.5;

A = 38;
B = 10;
beta = linspace(0, 2 * pi, tam);

for i=1 : tam
    x = x_center + A * cos(beta(i));
    z = z_center + B * sin(beta(i));
    
    T(:,:,i) = eye(4);
    T(1 : 3, 4, i) = [x y z]';
end;

for i = 1 : tam
    % Inverse Kinematics
    [theta_1 theta_2 theta_3 theta_4 theta_5 theta_6] = inverseKinematics(T(:, :, i));

    % Forward Kinematics
    T1_0 =  getTi_i_1(a_1, alpha_1, d_1, theta_1);
    link1_cur = transformation(link1_new, T1_0);

    T2_1 = getTi_i_1(a_2, alpha_2, d_2, theta_2);
    T2_0 = T1_0 * T2_1;
    link2_cur = transformation(link2_new, T2_0);

    T3_2 = getTi_i_1(a_3, alpha_3, d_3, theta_3);
    T3_0 = T2_0 * T3_2;
    link3_cur = transformation(link3_new, T3_0);

    T4_3 = getTi_i_1(a_4, alpha_4, d_4, theta_4);
    T4_0 = T3_0 * T4_3;
    link4_cur = transformation(link4_new, T4_0);

    T5_4 = getTi_i_1(a_5, alpha_5, d_5, theta_5);
    T5_0 = T4_0 * T5_4;
    link5_cur = transformation(link5_new, T5_0);

    T6_5 = getTi_i_1(a_6, alpha_6, d_6, theta_6);
    T6_0 = T5_0 * T6_5;
    end_effector_cur = transformation(end_effector_new, T6_0);

    % Animate
    cla, hold on;
    patch(base_new);
    patch(link1_cur);
    patch(link2_cur);
    patch(link3_cur);
    patch(link4_cur);
    patch(link5_cur);
    patch(end_effector_cur);
    if T(2, 4, i) == y
        plot3(P3(:, 1),P3(:, 2),P3(:, 3), '.b');
        P4(i, 1) = T6_0(1, 4);
        P4(i, 2) = T6_0(2, 4);
        P4(i, 3) = T6_0(3, 4);
        plot3(P4(:, 1),P4(:, 2),P4(:, 3), '*r');
    end
    hold off, axis equal;
    max = l1 + l2 + l3 + l4 + l5 + l6;
    min = -max;
    axis([min max min max 0 max]);
    view(3), xlabel('x'), ylabel('y'), zlabel('z'), grid on;
    pause(.05);
end;